# SPDX-License-Identifier: Apache-2.0
name: 'System contracts testing'

on: [push, pull_request]
   paths:
      - 'system-contract-testing/**'

defaults:
  run:
    shell: bash

permissions:
  checks: write
  contents: read
  actions: write
  statuses: write
  id-token: write

env:
  SOLO_CLUSTER_NAME: 'solo-system-contracts-e2e'
  SOLO_NAMESPACE: 'ssolo-system-contracts-e2e'
  SOLO_DEPLOYMENT: 'solo-system-contracts-deployment'
  SOLO_CLUSTER_SETUP_NAMESPACE: 'solo-setup'
  GRADLE_EXEC: ionice -c 2 -n 2 nice -n 19 ./gradlew

jobs:
  # Execute hedera-evm-testing tests
  system-contracts-regression:
    name: 'Standard'
    runs-on: hiero-smart-contracts-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        working-directory: ./system-contract-testing
        with:
          egress-policy: audit

      #  Check out the specified hiero-consensus-node reference
      - name: Checkout Consensus Node
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        working-directory: ./system-contract-testing
        with:
          repository: hiero-ledger/hiero-consensus-node
          ref: '20604-HIP-1215-Finalize-Smart-contract-tests-described-in-test-plan'
          fetch-depth: 0

      # Set up Java Environment
      - name: Setup Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        working-directory: ./system-contract-testing
        with:
          distribution: temurin
          java-version: 21.0.6

      # Set up the gradle environment
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1
        working-directory: ./system-contract-testing
        with:
          cache-read-only: false

      # Build the hiero-consensus-node artifacts
      - name: Build hiero-consensus-node
        working-directory: ./system-contract-testing
        run: ${GRADLE_EXEC} assemble
        
      # Set up the npm dependencies for the system contracts testing project
      - name: Install NodeJS Dependencies (json-rpc-relay)
        run: npm ci
        working-directory: ./system-contract-testing

      # Install solo and configure to use the artifacts from
      # the hiero-consensus-node build
      - name: Install Solo
        working-directory: ./system-contract-testing
        run: npm install -g @hashgraph/solo@latest

      # Set up kind; needed for configuring the solo environment
      - name: Setup Kind
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        working-directory: ./system-contract-testing
        with:
          install_only: true
          node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
          version: v0.26.0
          kubectl_version: v1.31.4
          verbosity: 3
          wait: 120s

      # Set up solo
      - name: Configure and run solo
        working-directory: ./system-contract-testing
        run: |
          kind create cluster -n "${SOLO_CLUSTER_NAME}"
          solo init
          solo cluster-ref connect --cluster-ref kind-${SOLO_CLUSTER_NAME} --context kind-${SOLO_CLUSTER_NAME}
          solo deployment create -n "${SOLO_NAMESPACE}" --deployment "${SOLO_DEPLOYMENT}"
          solo deployment add-cluster --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-${SOLO_CLUSTER_NAME} --num-consensus-nodes 1
          solo node keys --gossip-keys --tls-keys --deployment "${SOLO_DEPLOYMENT}"
          solo cluster-ref setup -s "${SOLO_CLUSTER_SETUP_NAMESPACE}"
          solo network deploy --deployment "${SOLO_DEPLOYMENT}"
          solo node setup --deployment "${SOLO_DEPLOYMENT}" --local-build-path ./hedera-node/data
          solo node start --deployment "${SOLO_DEPLOYMENT}"
          solo mirror-node deploy --deployment "${SOLO_DEPLOYMENT}" --cluster-ref kind-${SOLO_CLUSTER_NAME} --enable-ingress --pinger

      - name: Run the tests
        working-directory: ./system-contract-testing
        run: |
          npx hardhat test --network local

      # Stop the solo nodes
      - name: Stop solo
        if: ${{ always() }}
        run: |
          kind delete cluster -n ${{ env.SOLO_CLUSTER_NAME }}
